<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="/main.css" rel="stylesheet" />
    <!-- Include stylesheet -->
<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
   <!-- Include the Quill library -->
<script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
    <link
      href="https://fonts.googleapis.com/css?family=Cairo:400,600,700,900|Source+Sans+Pro|Fira+Code|Material+Icons"
      rel="stylesheet"
      type="text/css"
    />
    <!-- Include Editor JS files. -->
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/froala-editor@latest/js/froala_editor.pkgd.min.js"></script>
    <title>Talk Analytics</title>
</head>
<body>
<!---------------Setup---------------->

<div class="flex flex-col items-center parent">
  <div class="flex bold">

      <audio  id ="adi" src="<%= fileUrl %>"controls></audio>
   </div>
    <div class="flex flex-row space-x-8 flex-wrap mt-16">
             <!-- <div class="flex flex-col"> -->
              <% speakers.forEach(( duration, speakerId)=>{ %>
                <div class="font-bold text-lg mt-8 speaker"> Speaker <%= speakerId %>
                </div>
                <div class="text-sm  speaker">
                  <%= Math.round(duration/60).toString().padStart(2, "0" ) + ":" +
                    Math.round(duration%60).toString().padStart(2, "0" ) %>
                </div>
                <div class="text-sm speaker">
                  <%= Math.round(duration / speakers.reduce((a,b)=>a+b,0)*100) + "%" %>
                </div>
      

      <!-- </div> -->
    </div>
  </div>

  <div class="boxes">

    <div class="words-box">
        <h1>Words In Audio file</h1> 
        <!-- <p ><%= JSON.stringify(transcription.results.channels[0].alternatives[0].transcript) %> </p> -->
        <span style="color:#fff"><%= transcription.results.channels[0].alternatives[0].transcript.split(' ')[0] %></span>
        <% for (var i = 0; i < transcription.results.channels[0].alternatives[0].words.length;  i++ ) { %>
<span class="words" end="<%= transcription.results.channels[0].alternatives[0].words[i].end %>" target="<%= transcription.results.channels[0].alternatives[0].words[i].word %>" start="<%= transcription.results.channels[0].alternatives[0].words[i].start %>">   <%= transcription.results.channels[0].alternatives[0].words[i].word %> </span>

        <% } %>
    </div>  

    <div class="side-box"> 
      <h3>Response</h3>
      <div class="sidewords">
          <pre>   <%= JSON.stringify(transcription, null, 3) %> </pre>
      </div>
    </div>
                        
</div>

<% }); %>
<div class="area">
  <button class="copy" onclick="copyToClip()">
    Copy the stuff
    </button>
    <!-- Auto width -->
<button class="btn" onclick=saveTextAsFile(document.getElementById('foo').innerHTML,"download.rtf")><i class="fa fa-download"></i> Download</button>
  <!-- You can use a div tag as well. -->
  <p id="foo" style="color:black"><%= JSON.stringify(transcription.results.channels[0].alternatives[0].transcript) %></p>
  </div>

      <!----------script---------->
<style>
  .here{
    text-decoration: underline;
    text-decoration-color: yellow;
  }
  .words{
    color:#fff;
  }
</style>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
      <script>

( function(win, doc) {
            var audioPlayer = doc.getElementById("adi");
            var subtitles = doc.getElementsByClassName("words");
                var syncData = <%- JSON.stringify(transcription.results.channels[0].alternatives[0].words) %>;

            

            audioPlayer.addEventListener("timeupdate", function(e){
                syncData.forEach(function(element, index, array){
                    if( audioPlayer.currentTime >= element.start && audioPlayer.currentTime <= element.end ){
                        $('.words').removeClass('here');
                        subtitles[index].classList.add('here');
                }
        });
            });
                  }
                    (window, document));


        // on click 

        var audio = document.getElementById('adi');
        var target = document.getElementsByClassName('words')[0]
        var syncData = <%- JSON.stringify(transcription.results.channels[0].alternatives[0].words) %>;
        syncData.forEach(function (element ) {
        $('span' ).on('click' , function(event){
          $(this).css('cursor', 'pointer');
        //   $(this).find(element.currentTime, element.start , element.target ) 
        //   .addEventListener(change , function(e){
        // audio.currentTime =  

  // const attrs = Object.fromEntries(Array.from(this.attributes).map(item => [item.start]))
  // console.log(attrs.start) // "test"

      //  var a = $(this).val(element.start)
      a = $(this).attr('start')
      // console.log(a);
  // })
      //   console.log()
        // let value = element.start.childNodes.nodeValue;
        // console.log(value) // "test"
  //       const attrs = Object.fromEntries(Array.from(a.attributes).map(item => [item.start]))
  // console.log(attrs.start) // "test"
        // if(typeof $(this).attr('start') != "undefined"){ 
        //   console.log($(this).attr('src'));
        //   }
          if (
        audio.currentTime = a ){
          // console.log(audio.currentTime)
                  $(this).attr(audio.play())
        }
        else{
          cpnsole.log('error')
        }
        })
          // target[index].classList.add('here')
      })
      
      
      
  // Copy Button for Text-area


  function copyToClip() {
    var str = document.getElementById('foo').innerHTML;
  function listener(e) {
    
    // e.clipboardData.setData("text/html", str);
    e.clipboardData.setData("text/html", str);
    e.preventDefault();
  }
  document.addEventListener("copy", listener);
  document.execCommand("copy");
  document.removeEventListener("copy", listener);
  console.log("copied" , str);
  alert("The content is copied.")
};

// DownLoad Button Click

async function saveTextAsFile(textToWrite, fileNameToSaveAs)
    {
    	var textFileAsBlob = new Blob([textToWrite], {type:'rtf/plain'}); 

    	var downloadLink = document.createElement("a");
      var aa = await textFileAsBlob.text();
      console.log(aa);
    	downloadLink.download = fileNameToSaveAs;
    	downloadLink.innerHTML = "Download File";
    	if (window.webkitURL != null)
    	{
    		// Chrome allows the link to be clicked
    		// without actually adding it to the DOM.
    		downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
    	}
    	else
    	{
    		// Firefox requires the link to be added to the DOM
    		// before it can be clicked.
    		downloadLink.href = window.URL.createObjectURL(textFileAsBlob);

    		downloadLink.onclick = destroyClickedElement;
    	////	downloadLink.style.display = "none";
    		document.body.appendChild(downloadLink);
    	}
      console.log(window.URL.createObjectURL(textFileAsBlob))
    
    	//downloadLink.click();
    }

       
      
      </script>
<!-- Initialize Quill editor -->
<script>
  var quill = new Quill('#foo ', {
    theme: 'snow'
  });
</script>

      
      <!----------script---------->
 
</body>
</html>
